//
// auto-generated by op2.py
//

__constant__ int opDat3_down_kernel_stride_OP2CONSTANT;
int opDat3_down_kernel_stride_OP2HOST=-1;
__constant__ int direct_down_kernel_stride_OP2CONSTANT;
int direct_down_kernel_stride_OP2HOST=-1;
#include <math.h>
#include "const.h"

//user function
__device__ void down_kernel_gpu( 
    double* variable,
    const double* residual,
    const double* coord,
    const double* residual_above,
    const double* coord_above) {
  double dx = fabs(coord[(0)*direct_down_kernel_stride_OP2CONSTANT] - coord_above[(0)*opDat3_down_kernel_stride_OP2CONSTANT]);
  double dy = fabs(coord[(1)*direct_down_kernel_stride_OP2CONSTANT] - coord_above[(1)*opDat3_down_kernel_stride_OP2CONSTANT]);
  double dz = fabs(coord[(2)*direct_down_kernel_stride_OP2CONSTANT] - coord_above[(2)*opDat3_down_kernel_stride_OP2CONSTANT]);
  double dm = sqrt(dx * dx + dy * dy + dz * dz);

  variable[(VAR_DENSITY)*direct_down_kernel_stride_OP2CONSTANT] -=
      dm * (residual_above[(VAR_DENSITY)*opDat3_down_kernel_stride_OP2CONSTANT] - residual[(VAR_DENSITY)*direct_down_kernel_stride_OP2CONSTANT]);
  variable[(VAR_MOMENTUM + 0)*direct_down_kernel_stride_OP2CONSTANT] -=
      dx * (residual_above[(VAR_MOMENTUM + 0)*opDat3_down_kernel_stride_OP2CONSTANT] - residual[(VAR_MOMENTUM + 0)*direct_down_kernel_stride_OP2CONSTANT]);
  variable[(VAR_MOMENTUM + 1)*direct_down_kernel_stride_OP2CONSTANT] -=
      dy * (residual_above[(VAR_MOMENTUM + 1)*opDat3_down_kernel_stride_OP2CONSTANT] - residual[(VAR_MOMENTUM + 1)*direct_down_kernel_stride_OP2CONSTANT]);
  variable[(VAR_MOMENTUM + 2)*direct_down_kernel_stride_OP2CONSTANT] -=
      dz * (residual_above[(VAR_MOMENTUM + 2)*opDat3_down_kernel_stride_OP2CONSTANT] - residual[(VAR_MOMENTUM + 2)*direct_down_kernel_stride_OP2CONSTANT]);
  variable[(VAR_DENSITY_ENERGY)*direct_down_kernel_stride_OP2CONSTANT] -=
      dm * (residual_above[(VAR_DENSITY_ENERGY)*opDat3_down_kernel_stride_OP2CONSTANT] - residual[(VAR_DENSITY_ENERGY)*direct_down_kernel_stride_OP2CONSTANT]);

}

// CUDA kernel function
__global__ void op_cuda_down_kernel(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const int *__restrict opDat3Map,
  double *arg0,
  const double *__restrict arg1,
  const double *__restrict arg2,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map3idx;
    map3idx = opDat3Map[n + set_size * 0];

    //user-supplied kernel call
    down_kernel_gpu(arg0+n,
                arg1+n,
                arg2+n,
                ind_arg0+map3idx,
                ind_arg1+map3idx);
  }
}


//host stub function
void op_par_loop_down_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(22);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[22].name      = name;
  OP_kernels[22].count    += 1;


  int    ninds   = 2;
  int    inds[5] = {-1,-1,-1,0,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: down_kernel\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    if ((OP_kernels[22].count==1) || (opDat3_down_kernel_stride_OP2HOST != getSetSizeFromOpArg(&arg3))) {
      opDat3_down_kernel_stride_OP2HOST = getSetSizeFromOpArg(&arg3);
      cudaMemcpyToSymbol(opDat3_down_kernel_stride_OP2CONSTANT, &opDat3_down_kernel_stride_OP2HOST,sizeof(int));
    }
    if ((OP_kernels[22].count==1) || (direct_down_kernel_stride_OP2HOST != getSetSizeFromOpArg(&arg0))) {
      direct_down_kernel_stride_OP2HOST = getSetSizeFromOpArg(&arg0);
      cudaMemcpyToSymbol(direct_down_kernel_stride_OP2CONSTANT,&direct_down_kernel_stride_OP2HOST,sizeof(int));
    }
    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_22
      int nthread = OP_BLOCK_SIZE_22;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_down_kernel<<<nblocks,nthread>>>(
        (double *)arg3.data_d,
        (double *)arg4.data_d,
        arg3.map_data_d,
        (double*)arg0.data_d,
        (double*)arg1.data_d,
        (double*)arg2.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[22].time     += wall_t2 - wall_t1;
}
