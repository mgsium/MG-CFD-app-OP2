//
// auto-generated by op2.py
//

//user function
class unstructured_stream_kernel_kernel;

//host stub function
void op_par_loop_unstructured_stream_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(12);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[12].name      = name;
  OP_kernels[12].count    += 1;


  int    ninds   = 2;
  int    inds[5] = {0,0,-1,1,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: unstructured_stream_kernel\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_12
    int part_size = OP_PART_SIZE_12;
  #else
    int part_size = OP_part_size;
  #endif

  op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_COLOR2);

    cl::sycl::buffer<double,1> *arg0_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg0.data_d);
    cl::sycl::buffer<double,1> *arg3_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg3.data_d);
    cl::sycl::buffer<int,1> *map0_buffer = static_cast<cl::sycl::buffer<int,1>*>((void*)arg0.map_data_d);
    cl::sycl::buffer<double,1> *arg2_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg2.data_d);
    cl::sycl::buffer<int,1> *col_reord_buffer = static_cast<cl::sycl::buffer<int,1>*>((void*)Plan->col_reord);
    int set_size = set->size+set->exec_size;
    //execute plan
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      #ifdef OP_BLOCK_SIZE_12
      int nthread = OP_BLOCK_SIZE_12;
      #else
      int nthread = OP_block_size;
      #endif

      int start = Plan->col_offsets[0][col];
      int end = Plan->col_offsets[0][col+1];
      int nblocks = (end - start - 1)/nthread + 1;
      try {
      op2_queue->submit([&](cl::sycl::handler& cgh) {
        auto ind_arg0 = (*arg0_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
        auto ind_arg1 = (*arg3_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
        auto opDat0Map =  (*map0_buffer).template get_access<cl::sycl::access::mode::read>(cgh);
        auto col_reord = (*col_reord_buffer).template get_access<cl::sycl::access::mode::read>(cgh);

        auto arg2 = (*arg2_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);

        //user fun as lambda
        auto unstructured_stream_kernel_gpu = [=]( 
              const double *variables_a,
              const double *variables_b,
              const double *edge_weight,
              double *fluxes_a,
              double *fluxes_b) {
              double ex = edge_weight[0];
              double ey = edge_weight[1];
              double ez = edge_weight[2];
          
              double p_a, pe_a;
              double3 momentum_a;
              p_a          = variables_a[VAR_DENSITY];
              momentum_a.x = variables_a[VAR_MOMENTUM+0];
              momentum_a.y = variables_a[VAR_MOMENTUM+1];
              momentum_a.z = variables_a[VAR_MOMENTUM+2];
              pe_a         = variables_a[VAR_DENSITY_ENERGY];
          
              double p_b, pe_b;
              double3 momentum_b;
              p_b          = variables_b[VAR_DENSITY];
              momentum_b.x = variables_b[VAR_MOMENTUM+0];
              momentum_b.y = variables_b[VAR_MOMENTUM+1];
              momentum_b.z = variables_b[VAR_MOMENTUM+2];
              pe_b         = variables_b[VAR_DENSITY_ENERGY];
          
              double p_a_val  = p_b + ex;
              double pe_a_val = pe_b + ey;
              double mx_a_val = momentum_b.x + ez;
              double my_a_val = momentum_b.y;
              double mz_a_val = momentum_b.z;
          
              double p_b_val = p_a;
              double pe_b_val = pe_a;
              double mx_b_val = momentum_a.x;
              double my_b_val = momentum_a.y;
              double mz_b_val = momentum_a.z;
          
              fluxes_a[VAR_DENSITY]  += p_a_val;
              fluxes_a[VAR_MOMENTUM+0] += mx_a_val;
              fluxes_a[VAR_MOMENTUM+1] += my_a_val;
              fluxes_a[VAR_MOMENTUM+2] += mz_a_val;
              fluxes_a[VAR_DENSITY_ENERGY] += pe_a_val;
          
              fluxes_b[VAR_DENSITY]  += p_b_val;
              fluxes_b[VAR_MOMENTUM+0] += mx_b_val;
              fluxes_b[VAR_MOMENTUM+1] += my_b_val;
              fluxes_b[VAR_MOMENTUM+2] += mz_b_val;
              fluxes_b[VAR_DENSITY_ENERGY] += pe_b_val;
          
          };
          
        auto kern = [=](cl::sycl::item<1> item) {
          int tid = item.get_id(0);
          if (tid + start < end) {
            int n = col_reord[tid + start];
            //initialise local variables
            int map0idx;
            int map1idx;
            map0idx = opDat0Map[n + set_size * 0];
            map1idx = opDat0Map[n + set_size * 1];

            //user-supplied kernel call
            unstructured_stream_kernel_gpu(&ind_arg0[map0idx*5],
                                           &ind_arg0[map1idx*5],
                                           &arg2[n*3],
                                           &ind_arg1[map0idx*5],
                                           &ind_arg1[map1idx*5]);
          }

        };
        cgh.parallel_for<class unstructured_stream_kernel_kernel>(cl::sycl::range<1>(nthread*nblocks), kern);
      });
      }catch(cl::sycl::exception const &e) {
      std::cout << e.what() << std::endl;exit(-1);
      }

    }
    OP_kernels[12].transfer  += Plan->transfer;
    OP_kernels[12].transfer2 += Plan->transfer2;
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  op2_queue->wait();
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[12].time     += wall_t2 - wall_t1;
}
