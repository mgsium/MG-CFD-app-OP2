#from ufl_fm import *

cell = tetrahedron
element = FiniteElement("Lagrange", cell, 1)
c_el = VectorElement("Lagrange", cell, 1, dim=3)
mesh = Mesh(c_el)
V = FunctionSpace(mesh, element)

x = SpatialCoordinate(mesh)
r = sqrt(x[1]**2 + x[2]**2)

T  = Coefficient(V)
T0 = Coefficient(V)
v  = TestFunction(V)
dT = TrialFunction(V)

dt = Constant(mesh)
time = Constant(mesh)
dx = dx(domain=mesh, degree=4)
ds = ds(domain=mesh, degree=4)



#model = read_model_json("../crescendo-mesh/CRESCENDO_ENGINE_LTMS_order1_cpp.json", {"T": T, "time": time}, r)

mat_data = {"TNM" : {"rho":0.443000E-08, "nu":0.33, "E":116000.0, "alpha":0.852000E-05, "kappa":6.77000, "Cp":0.545000E+09},\
		"NKL" : {"rho":0.822000E-08, "nu":0.32, "E":207000.0, "alpha":0.129000E-04, "kappa":10.9000, "Cp":0.424000E+09}, \
		"STL": {"rho":0.777000E-08, "nu":0.28, "E":212000.0, "alpha":0.979000E-05, "kappa":20.9000, "Cp":0.449000E+09}
		}
dom_map = {1:"NKL", 2:"TNM", 3:"NKL", 4:"NKL", 5:"STL"}

htc = 0.45
flux = 10.0
T_remote = 293.0
T_fluid = 393.0
emissivity = 0.05
boltz = 5.6703E-18

F = 0
for dom in range(1,6) :
	material = mat_data[dom_map[dom]]
	kappa = material["kappa"]
	rho = material["rho"]
	cp = material["Cp"]
	F += rho*cp*(T-T0) * v * dx(dom) + dt * dot(kappa *grad(T), grad(v)) * dx(dom)

flux_faces =[512]
zone_faces =[517]
extrad_faces =[521,526]

for ents in flux_faces :
	F += flux * v * ds(int(ents))
for ents in zone_faces :
	F += dt * htc * (T - T_fluid) * v * ds(int(ents))
for ents in extrad_faces :
	F += dt* boltz *emissivity * (T**4 - T_remote**4) *v *ds(int(ents))


J = derivative(F, T, dT)


# Before the form file can be used in the C++ program, it must be
# compiled using FFC by running (on the command-line):
# 
# .. code-block:: sh
# 
#    ffcx -f quadrature_degree=4 TransientThermal.ufl
